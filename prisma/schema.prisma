datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String     @id @default(cuid())
  name     String?
  phone    String?    @unique
  email    String     @unique
  profile  String?
  password Password?

  items        Item[]
  notes           Note[]
  chats           Chat[]
  balance         Balance[]
  stores          Store[]
  deliveryMethods DeliveryMethod[]
  paymentMethods  PaymentMethod[]
  messages        Message[]
  orders          Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id          String   @id @default(cuid())
  name        String
  comment     String
  price       Float
  currency    String
  icon        String
  tags        String[]
  unit        String
  quantity    Int

  addedBy   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  belongsTo Store  @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storeId   String
  userId    String

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Balance {
  id       String @id @default(cuid())
  amount   Float
  currency String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  id          String   @id @default(cuid())
  name        String
  comment     String
  icon        String
  cover       String?
  categories  String[] @default([])
  location    String
  items       Item[]

  addedBy User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model DeliveryMethod {
  id          String @id @default(cuid())
  name        String
  comment     String
  icon        String

  orders Order[]

  addedBy User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentMethod {
  id          String @id @default(cuid())
  name        String
  comment     String
  icon        String

  addedBy User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model Order {
  id              String         @id @default(cuid())
  status          String
  items           Item[]
  deliveryMethod  DeliveryMethod @relation(fields: [deliveryMethodId], references: [id])
  paymentMethod   PaymentMethod  @relation(fields: [paymentMethodId], references: [id])
  deliveryLocation String
  deliveryFee     Float
  total           Float
  currency        String

  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storeId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  deliveryMethodId String
  paymentMethodId  String
}

model Driver {
  id        String   @id @default(cuid())
  name      String
  phone     String
  email     String
  picture   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id   String @id @default(cuid())
  body String

  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id       String    @id @default(cuid())
  messages Message[]
  users    User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
