datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String    @id @default(cuid())
  names    String?
  username String?
  phone    String?   @unique
  email    String    @unique
  profile  String?
  password Password?

  items           Item[]
  chats           Chat[]
  balance         Balance[]
  stores          Store[]
  deliveryMethods DeliveryMethod[]
  paymentMethods  PaymentMethod[]
  orders          Order[]
  logs            Log[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Message   Message[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Item {
  id               String            @id @default(cuid())
  name             String
  comment          String?
  price            Float
  currency         String?
  images           String[]
  categories       String[]
  itemCustomFields ItemCustomField[]
  unit             String?
  quantity         Int

  addedBy   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  belongsTo Store  @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storeId   String
  userId    String

  orders Order[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  CustomField CustomField[]
}

model CustomField {
  id          String  @id @default(cuid())
  name        String
  icon        String?
  type        String
  order       String
  default     String
  placeholder String

  ItemCustomField ItemCustomField[]

  belongsTo Item   @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId    String
}

model ItemCustomField {
  id    String @id @default(cuid())
  value String

  field   CustomField @relation(fields: [fieldId], references: [id])
  fieldId String

  belongsTo Item   @relation(fields: [itemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  itemId    String
}

model Balance {
  id       String @id @default(cuid())
  amount   Float
  currency String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Store {
  id         String   @id @default(cuid())
  name       String
  comment    String
  icon       String?
  cover      String?
  categories String[] @default([])
  location   String
  items      Item[]
  body       String?
  favorite   Boolean  @default(false)
  color      String?

  addedBy User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model DeliveryMethod {
  id           String @id @default(cuid())
  name         String
  instructions String
  icon         String

  orders Order[]

  addedBy User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentMethod {
  id           String @id @default(cuid())
  name         String
  instructions String
  icon         String
  momoCode     String
  businessName String

  addedBy User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
}

model Order {
  id               String         @id @default(cuid())
  status           String
  items            Item[]
  deliveryMethod   DeliveryMethod @relation(fields: [deliveryMethodId], references: [id])
  paymentMethod    PaymentMethod  @relation(fields: [paymentMethodId], references: [id])
  deliveryLocation String
  deliveryFee      Float
  total            Float

  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  storeId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  deliveryMethodId String
  paymentMethodId  String
}

model Driver {
  id        String   @id @default(cuid())
  name      String
  phone     String
  email     String
  picture   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id   String @id @default(cuid())
  body String

  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  chatId String

  sentBy   User   @relation(fields: [senderId], references: [id])
  senderId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id       String    @id @default(cuid())
  messages Message[]

  ownedBy User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Log {
  id          String  @id @default(cuid())
  type        String
  event       String
  description String
  icon        String
  notify      Boolean @default(false)

  addedBy User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
